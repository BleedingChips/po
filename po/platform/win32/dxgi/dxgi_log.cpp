#include "dxgi_log.h"
#include <unordered_map>
#include <sstream>
#include <mutex>

#define MAP_PAIR(x) { x , (#x) }
#define SWITCH_CASE(x) case x: return (#x);

namespace
{
	std::mutex ss_mutex;
	std::stringstream ss;


	const std::unordered_map<DXGI_FORMAT, std::string> DXGIFormat_mapping =
	{
		MAP_PAIR(DXGI_FORMAT_UNKNOWN),
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_UINT),
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_SINT),
		MAP_PAIR(DXGI_FORMAT_R32G32B32_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R32G32B32_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R32G32B32_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R32G32B32_UINT),
		MAP_PAIR(DXGI_FORMAT_R32G32B32_SINT),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_UNORM),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_UINT),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_SNORM),
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_SINT),
		MAP_PAIR(DXGI_FORMAT_R32G32_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R32G32_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R32G32_UINT),
		MAP_PAIR(DXGI_FORMAT_R32G32_SINT),
		MAP_PAIR(DXGI_FORMAT_R32G8X24_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_D32_FLOAT_S8X24_UINT),
		MAP_PAIR(DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_X32_TYPELESS_G8X24_UINT),
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_UNORM),
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_UINT),
		MAP_PAIR(DXGI_FORMAT_R11G11B10_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UNORM),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UINT),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_SNORM),
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_SINT),
		MAP_PAIR(DXGI_FORMAT_R16G16_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R16G16_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R16G16_UNORM),
		MAP_PAIR(DXGI_FORMAT_R16G16_UINT),
		MAP_PAIR(DXGI_FORMAT_R16G16_SNORM),
		MAP_PAIR(DXGI_FORMAT_R16G16_SINT),
		MAP_PAIR(DXGI_FORMAT_R32_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_D32_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R32_FLOAT),
		MAP_PAIR(DXGI_FORMAT_R32_UINT),
		MAP_PAIR(DXGI_FORMAT_R32_SINT),
		MAP_PAIR(DXGI_FORMAT_R24G8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_D24_UNORM_S8_UINT),
		MAP_PAIR(DXGI_FORMAT_R24_UNORM_X8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_X24_TYPELESS_G8_UINT),
		MAP_PAIR(DXGI_FORMAT_R8G8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R8G8_UNORM),
		MAP_PAIR(DXGI_FORMAT_R8G8_UINT),
		MAP_PAIR(DXGI_FORMAT_R8G8_SNORM),
		MAP_PAIR(DXGI_FORMAT_R8G8_SINT),
		MAP_PAIR(DXGI_FORMAT_R16_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R16_FLOAT),
		MAP_PAIR(DXGI_FORMAT_D16_UNORM),
		MAP_PAIR(DXGI_FORMAT_R16_UNORM),
		MAP_PAIR(DXGI_FORMAT_R16_UINT),
		MAP_PAIR(DXGI_FORMAT_R16_SNORM),
		MAP_PAIR(DXGI_FORMAT_R16_SINT),
		MAP_PAIR(DXGI_FORMAT_R8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_R8_UNORM),
		MAP_PAIR(DXGI_FORMAT_R8_UINT),
		MAP_PAIR(DXGI_FORMAT_R8_SNORM),
		MAP_PAIR(DXGI_FORMAT_R8_SINT),
		MAP_PAIR(DXGI_FORMAT_A8_UNORM),
		MAP_PAIR(DXGI_FORMAT_R1_UNORM),
		MAP_PAIR(DXGI_FORMAT_R9G9B9E5_SHAREDEXP),
		MAP_PAIR(DXGI_FORMAT_R8G8_B8G8_UNORM),
		MAP_PAIR(DXGI_FORMAT_G8R8_G8B8_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC1_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC1_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC1_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_BC2_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC2_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC2_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_BC3_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC3_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC3_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_BC4_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC4_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC4_SNORM),
		MAP_PAIR(DXGI_FORMAT_BC5_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC5_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC5_SNORM),
		MAP_PAIR(DXGI_FORMAT_B5G6R5_UNORM),
		MAP_PAIR(DXGI_FORMAT_B5G5R5A1_UNORM),
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_UNORM),
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_UNORM),
		MAP_PAIR(DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM),
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_BC6H_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC6H_UF16),
		MAP_PAIR(DXGI_FORMAT_BC6H_SF16),
		MAP_PAIR(DXGI_FORMAT_BC7_TYPELESS),
		MAP_PAIR(DXGI_FORMAT_BC7_UNORM),
		MAP_PAIR(DXGI_FORMAT_BC7_UNORM_SRGB),
		MAP_PAIR(DXGI_FORMAT_AYUV),
		MAP_PAIR(DXGI_FORMAT_Y410),
		MAP_PAIR(DXGI_FORMAT_Y416),
		MAP_PAIR(DXGI_FORMAT_NV12),
		MAP_PAIR(DXGI_FORMAT_P010),
		MAP_PAIR(DXGI_FORMAT_P016),
		MAP_PAIR(DXGI_FORMAT_420_OPAQUE),
		MAP_PAIR(DXGI_FORMAT_YUY2),
		MAP_PAIR(DXGI_FORMAT_Y210),
		MAP_PAIR(DXGI_FORMAT_Y216),
		MAP_PAIR(DXGI_FORMAT_NV11),
		MAP_PAIR(DXGI_FORMAT_AI44),
		MAP_PAIR(DXGI_FORMAT_IA44),
		MAP_PAIR(DXGI_FORMAT_P8),
		MAP_PAIR(DXGI_FORMAT_A8P8),
		MAP_PAIR(DXGI_FORMAT_B4G4R4A4_UNORM)
		/*
		,MAP_PAIR(DXGI_FORMAT_P208),
		MAP_PAIR(DXGI_FORMAT_V208),
		MAP_PAIR(DXGI_FORMAT_V408)
		*/
	};

}


namespace PO
{
	namespace Platform
	{
		namespace Dxgi
		{
			namespace Log
			{
				std::string DXGI_FORMAT_to_s(DXGI_FORMAT form)
				{
					auto ptr = DXGIFormat_mapping.find(form);
					if (ptr != DXGIFormat_mapping.end())
						return ptr->second;
					std::lock_guard<decltype(ss_mutex)> ld(ss_mutex);
					ss.clear();
					ss << form;
					std::string tem;
					ss >> tem;
					tem = "unkonw Dxgi format:" + tem;
					return tem;
				}

				std::string DXGI_ADAPTER_FLAG_to_s(DXGI_ADAPTER_FLAG da)
				{
					switch (da)
					{
						SWITCH_CASE(DXGI_ADAPTER_FLAG_NONE);
						SWITCH_CASE(DXGI_ADAPTER_FLAG_REMOTE);
						SWITCH_CASE(DXGI_ADAPTER_FLAG_SOFTWARE);
					default:
					{
						std::lock_guard<decltype(ss_mutex)> ld(ss_mutex);
						ss.clear();
						ss << (UINT)(da);
						std::string tem;
						ss >> tem;
						tem = "unkonw DXGI_ADAPTER_FLAG :" + tem;
						return tem;
					}
					}
				}
			}
		}
	}
}