#include "define_dxgi.h"
#include <unordered_map>
#define MAP_PAIR(x) { x , (#x) },

namespace
{
	const std::unordered_map<UINT, const char*> format_map = 
	{
		MAP_PAIR(DXGI_FORMAT_UNKNOWN)
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_UINT)
		MAP_PAIR(DXGI_FORMAT_R32G32B32A32_SINT)
		MAP_PAIR(DXGI_FORMAT_R32G32B32_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R32G32B32_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R32G32B32_UINT)
		MAP_PAIR(DXGI_FORMAT_R32G32B32_SINT)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_UNORM)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_UINT)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_SNORM)
		MAP_PAIR(DXGI_FORMAT_R16G16B16A16_SINT)
		MAP_PAIR(DXGI_FORMAT_R32G32_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R32G32_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R32G32_UINT)
		MAP_PAIR(DXGI_FORMAT_R32G32_SINT)
		MAP_PAIR(DXGI_FORMAT_R32G8X24_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_D32_FLOAT_S8X24_UINT)
		MAP_PAIR(DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_X32_TYPELESS_G8X24_UINT)
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_UNORM)
		MAP_PAIR(DXGI_FORMAT_R10G10B10A2_UINT)
		MAP_PAIR(DXGI_FORMAT_R11G11B10_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UNORM)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_UINT)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_SNORM)
		MAP_PAIR(DXGI_FORMAT_R8G8B8A8_SINT)
		MAP_PAIR(DXGI_FORMAT_R16G16_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R16G16_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R16G16_UNORM)
		MAP_PAIR(DXGI_FORMAT_R16G16_UINT)
		MAP_PAIR(DXGI_FORMAT_R16G16_SNORM)
		MAP_PAIR(DXGI_FORMAT_R16G16_SINT)
		MAP_PAIR(DXGI_FORMAT_R32_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_D32_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R32_FLOAT)
		MAP_PAIR(DXGI_FORMAT_R32_UINT)
		MAP_PAIR(DXGI_FORMAT_R32_SINT)
		MAP_PAIR(DXGI_FORMAT_R24G8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_D24_UNORM_S8_UINT)
		MAP_PAIR(DXGI_FORMAT_R24_UNORM_X8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_X24_TYPELESS_G8_UINT)
		MAP_PAIR(DXGI_FORMAT_R8G8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R8G8_UNORM)
		MAP_PAIR(DXGI_FORMAT_R8G8_UINT)
		MAP_PAIR(DXGI_FORMAT_R8G8_SNORM)
		MAP_PAIR(DXGI_FORMAT_R8G8_SINT)
		MAP_PAIR(DXGI_FORMAT_R16_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R16_FLOAT)
		MAP_PAIR(DXGI_FORMAT_D16_UNORM)
		MAP_PAIR(DXGI_FORMAT_R16_UNORM)
		MAP_PAIR(DXGI_FORMAT_R16_UINT)
		MAP_PAIR(DXGI_FORMAT_R16_SNORM)
		MAP_PAIR(DXGI_FORMAT_R16_SINT)
		MAP_PAIR(DXGI_FORMAT_R8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_R8_UNORM)
		MAP_PAIR(DXGI_FORMAT_R8_UINT)
		MAP_PAIR(DXGI_FORMAT_R8_SNORM)
		MAP_PAIR(DXGI_FORMAT_R8_SINT)
		MAP_PAIR(DXGI_FORMAT_A8_UNORM)
		MAP_PAIR(DXGI_FORMAT_R1_UNORM)
		MAP_PAIR(DXGI_FORMAT_R9G9B9E5_SHAREDEXP)
		MAP_PAIR(DXGI_FORMAT_R8G8_B8G8_UNORM)
		MAP_PAIR(DXGI_FORMAT_G8R8_G8B8_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC1_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC1_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC1_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_BC2_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC2_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC2_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_BC3_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC3_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC3_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_BC4_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC4_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC4_SNORM)
		MAP_PAIR(DXGI_FORMAT_BC5_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC5_UNORM)
		MAP_PAIR(DXGI_FORMAT_BC5_SNORM)
		MAP_PAIR(DXGI_FORMAT_B5G6R5_UNORM)
		MAP_PAIR(DXGI_FORMAT_B5G5R5A1_UNORM)
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_UNORM)
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_UNORM)
		MAP_PAIR(DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM)
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_B8G8R8A8_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_B8G8R8X8_UNORM_SRGB)
		MAP_PAIR(DXGI_FORMAT_BC6H_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC6H_UF16)
		MAP_PAIR(DXGI_FORMAT_BC6H_SF16)
		MAP_PAIR(DXGI_FORMAT_BC7_TYPELESS)
		MAP_PAIR(DXGI_FORMAT_BC7_UNORM)
			MAP_PAIR(DXGI_FORMAT_BC7_UNORM_SRGB)
			MAP_PAIR(DXGI_FORMAT_AYUV)
			MAP_PAIR(DXGI_FORMAT_Y410)
			MAP_PAIR(DXGI_FORMAT_Y416)
			MAP_PAIR(DXGI_FORMAT_NV12)
			MAP_PAIR(DXGI_FORMAT_P010)
			MAP_PAIR(DXGI_FORMAT_P016)
			MAP_PAIR(DXGI_FORMAT_420_OPAQUE)
			MAP_PAIR(DXGI_FORMAT_YUY2)
			MAP_PAIR(DXGI_FORMAT_Y210)
			MAP_PAIR(DXGI_FORMAT_Y216)
			MAP_PAIR(DXGI_FORMAT_NV11)
			MAP_PAIR(DXGI_FORMAT_AI44)
			MAP_PAIR(DXGI_FORMAT_IA44)
			MAP_PAIR(DXGI_FORMAT_P8)
			MAP_PAIR(DXGI_FORMAT_A8P8)
			MAP_PAIR(DXGI_FORMAT_B4G4R4A4_UNORM)
	};
}
namespace PO::DXGI
{

	const char* format_to_utf8(Format format) noexcept
	{
		auto ite = format_map.find(format);
		if (ite != format_map.end())
			return ite->second;
		return nullptr;
	}

	Format translate(PO::Graphic::FormatPixel FP) noexcept 
	{
		switch (FP)
		{
		case PO::Graphic::FormatPixel::UNKNOW:
			return Format::DXGI_FORMAT_UNKNOWN;
		case PO::Graphic::FormatPixel::F32:
			return Format::DXGI_FORMAT_R32_FLOAT;
		case PO::Graphic::FormatPixel::F16:
			return Format::DXGI_FORMAT_R16_FLOAT;
		case PO::Graphic::FormatPixel::UI16:
			return Format::DXGI_FORMAT_R16_UINT;
		case PO::Graphic::FormatPixel::UI32:
			return Format::DXGI_FORMAT_R32_UINT;
		case PO::Graphic::FormatPixel::RGBA_F32:
			return Format::DXGI_FORMAT_R32G32B32A32_FLOAT;
		case PO::Graphic::FormatPixel::RGBA_F16:
			return Format::DXGI_FORMAT_R16G16B16A16_FLOAT;
		case PO::Graphic::FormatPixel::RGBA_UI8:
			return Format::DXGI_FORMAT_R8_UINT;
		case PO::Graphic::FormatPixel::RGBA_I8:
			return Format::DXGI_FORMAT_R8_SINT;
		case PO::Graphic::FormatPixel::RGBA_U8:
			return Format::DXGI_FORMAT_R8G8B8A8_UNORM;
		case PO::Graphic::FormatPixel::RGB_F32:
			return Format::DXGI_FORMAT_R32G32B32_FLOAT;
		default:
			return Format::DXGI_FORMAT_UNKNOWN;
		}
	}

	uint8_t calculate_pixel_size(Format format)
	{
		switch (format)
		{
		case DXGI_FORMAT_R32G32B32A32_TYPELESS:
		case DXGI_FORMAT_R32G32B32A32_FLOAT:
		case DXGI_FORMAT_R32G32B32A32_UINT:
		case DXGI_FORMAT_R32G32B32A32_SINT:
			return 12;

		case DXGI_FORMAT_R32G32B32_TYPELESS:
		case DXGI_FORMAT_R32G32B32_FLOAT:
		case DXGI_FORMAT_R32G32B32_UINT:
		case DXGI_FORMAT_R32G32B32_SINT:
			return 8;

		case DXGI_FORMAT_R16G16B16A16_TYPELESS:
		case DXGI_FORMAT_R16G16B16A16_FLOAT:
		case DXGI_FORMAT_R16G16B16A16_UNORM:
		case DXGI_FORMAT_R16G16B16A16_UINT:
		case DXGI_FORMAT_R16G16B16A16_SNORM:
		case DXGI_FORMAT_R16G16B16A16_SINT:
		case DXGI_FORMAT_R32G32_TYPELESS:
		case DXGI_FORMAT_R32G32_FLOAT:
		case DXGI_FORMAT_R32G32_UINT:
		case DXGI_FORMAT_R32G32_SINT:
		case DXGI_FORMAT_R32G8X24_TYPELESS:
		case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
		case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
			return 8;

		case DXGI_FORMAT_R10G10B10A2_TYPELESS:
		case DXGI_FORMAT_R10G10B10A2_UNORM:
		case DXGI_FORMAT_R10G10B10A2_UINT:
		case DXGI_FORMAT_R11G11B10_FLOAT:
		case DXGI_FORMAT_R8G8B8A8_TYPELESS:
		case DXGI_FORMAT_R8G8B8A8_UNORM:
		case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
		case DXGI_FORMAT_R8G8B8A8_UINT:
		case DXGI_FORMAT_R8G8B8A8_SNORM:
		case DXGI_FORMAT_R8G8B8A8_SINT:
		case DXGI_FORMAT_R16G16_TYPELESS:
		case DXGI_FORMAT_R16G16_FLOAT:
		case DXGI_FORMAT_R16G16_UNORM:
		case DXGI_FORMAT_R16G16_UINT:
		case DXGI_FORMAT_R16G16_SNORM:
		case DXGI_FORMAT_R16G16_SINT:
		case DXGI_FORMAT_R32_TYPELESS:
		case DXGI_FORMAT_D32_FLOAT:
		case DXGI_FORMAT_R32_FLOAT:
		case DXGI_FORMAT_R32_UINT:
		case DXGI_FORMAT_R32_SINT:
		case DXGI_FORMAT_R24G8_TYPELESS:
		case DXGI_FORMAT_D24_UNORM_S8_UINT:
		case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
		case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
		case DXGI_FORMAT_B8G8R8A8_UNORM:
		case DXGI_FORMAT_B8G8R8X8_UNORM:
			return 4;

		case DXGI_FORMAT_R8G8_TYPELESS:
		case DXGI_FORMAT_R8G8_UNORM:
		case DXGI_FORMAT_R8G8_UINT:
		case DXGI_FORMAT_R8G8_SNORM:
		case DXGI_FORMAT_R8G8_SINT:
		case DXGI_FORMAT_R16_TYPELESS:
		case DXGI_FORMAT_R16_FLOAT:
		case DXGI_FORMAT_D16_UNORM:
		case DXGI_FORMAT_R16_UNORM:
		case DXGI_FORMAT_R16_UINT:
		case DXGI_FORMAT_R16_SNORM:
		case DXGI_FORMAT_R16_SINT:
		case DXGI_FORMAT_B5G6R5_UNORM:
		case DXGI_FORMAT_B5G5R5A1_UNORM:
			return 2;

		case DXGI_FORMAT_R8_TYPELESS:
		case DXGI_FORMAT_R8_UNORM:
		case DXGI_FORMAT_R8_UINT:
		case DXGI_FORMAT_R8_SNORM:
		case DXGI_FORMAT_R8_SINT:
		case DXGI_FORMAT_A8_UNORM:
			return 1;

			// Compressed format; http://msdn2.microsoft.com/en-us/library/bb694531(VS.85).aspx
		case DXGI_FORMAT_BC2_TYPELESS:
		case DXGI_FORMAT_BC2_UNORM:
		case DXGI_FORMAT_BC2_UNORM_SRGB:
		case DXGI_FORMAT_BC3_TYPELESS:
		case DXGI_FORMAT_BC3_UNORM:
		case DXGI_FORMAT_BC3_UNORM_SRGB:
		case DXGI_FORMAT_BC5_TYPELESS:
		case DXGI_FORMAT_BC5_UNORM:
		case DXGI_FORMAT_BC5_SNORM:
			return 16;

			// Compressed format; http://msdn2.microsoft.com/en-us/library/bb694531(VS.85).aspx
		case DXGI_FORMAT_R1_UNORM:
		case DXGI_FORMAT_BC1_TYPELESS:
		case DXGI_FORMAT_BC1_UNORM:
		case DXGI_FORMAT_BC1_UNORM_SRGB:
		case DXGI_FORMAT_BC4_TYPELESS:
		case DXGI_FORMAT_BC4_UNORM:
		case DXGI_FORMAT_BC4_SNORM:
			return 8;

			// Compressed format; http://msdn2.microsoft.com/en-us/library/bb694531(VS.85).aspx
		case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
			return 4;

			// These are compressed, but bit-size information is unclear.
		case DXGI_FORMAT_R8G8_B8G8_UNORM:
		case DXGI_FORMAT_G8R8_G8B8_UNORM:
			return 4;

		case DXGI_FORMAT_UNKNOWN:
		default:
			return 0;
		}
	}

}